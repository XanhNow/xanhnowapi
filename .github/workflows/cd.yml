name: CD - Deploy to VM (self-hosted runner)

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, vm-dotnet-api]   # ch·∫°y ƒë√∫ng runner tr√™n VM
    permissions:
      contents: read
    env:
      SERVICE_NAME: "xanhnow-auth"
      PROJECT: "src/AuthService.Api/AuthService.Api.csproj"   # ‚á¶ ƒë·ªïi n·∫øu kh√°c
      APP_DIR: "/opt/xanhnow-auth"
      PORT: "5000"
      HEALTH_PATHS: "/healthz /health /swagger/index.html /"
      KEEP_RELEASES: "5"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify .NET on VM
        run: dotnet --info

      - name: Verify project file exists
        shell: bash
        run: |
          set -euo pipefail
          test -f "$PROJECT" || { echo "‚ùå PROJECT not found: $PROJECT"; exit 1; }
          echo "‚úÖ Found PROJECT: $PROJECT"

      - name: Restore & Publish (self-contained linux-x64)
        shell: bash
        run: |
          set -euo pipefail
          dotnet restore "$PROJECT"
          dotnet publish "$PROJECT" -c Release -r linux-x64 --self-contained true \
            -p:PublishSingleFile=true -p:UseAppHost=true -o ./publish
          echo "üì¶ Publish output:"
          ls -la ./publish

      - name: Create run.sh (auto-detect exe/dll)
        shell: bash
        run: |
          set -euo pipefail
          cd ./publish
          cat > run.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          cd "$(dirname "$0")"
          # Cho ph√©p override t·ª´ EnvironmentFile c·ªßa systemd
          export ASPNETCORE_URLS="${ASPNETCORE_URLS:-http://127.0.0.1:5000}"

          exe=$(find . -maxdepth 1 -type f -perm -111 ! -name "run.sh" ! -name "*.dll" | head -n1 || true)
          dll=$(find . -maxdepth 1 -type f -name "*.dll" | head -n1 || true)

          if [ -n "${exe:-}" ]; then
            echo "‚ñ∂Ô∏è  Running self-contained binary: $exe"
            exec "$exe"
          elif [ -n "${dll:-}" ]; then
            echo "‚ñ∂Ô∏è  Running DLL with dotnet: $dll"
            exec /usr/bin/env dotnet "$dll"
          else
            echo "‚ùå No runnable app (exe/dll) found in $(pwd)" >&2
            ls -la
            exit 1
          fi
          SH
          chmod +x run.sh
          echo "‚úÖ run.sh ready"

      - name: Deploy to ${{ env.APP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          sudo -n mkdir -p "${APP_DIR}/releases" "${APP_DIR}/logs" "${APP_DIR}/shared"

          RELEASE_DIR="${APP_DIR}/releases/${GITHUB_SHA}"
          sudo -n mkdir -p "$RELEASE_DIR"

          if command -v rsync >/dev/null 2>&1; then
            sudo -n rsync -a ./publish/ "$RELEASE_DIR"/
          else
            echo "‚ö†Ô∏è rsync not found, fallback to cp -a"
            sudo -n cp -a ./publish/. "$RELEASE_DIR"/
          fi

          sudo -n chown -R deploy:deploy "$RELEASE_DIR"

          # current lu√¥n l√† symlink tr·ªè T·ªöI release m·ªõi
          sudo -n rm -rf "${APP_DIR}/current"
          sudo -n ln -sfnT "$RELEASE_DIR" "${APP_DIR}/current"

          sudo -n chmod g+s "${APP_DIR}" "${APP_DIR}/releases" "${APP_DIR}/shared" "${APP_DIR}/logs"
          sudo -n chown -R deploy:deploy "${APP_DIR}"

          echo "--- APP_DIR ---"
          sudo -n ls -la "${APP_DIR}" | sed -n '1,120p'
          echo "--- CURRENT ---"
          sudo -n ls -la "${APP_DIR}/current" | sed -n '1,120p'

      - name: Prune old releases (keep last ${{ env.KEEP_RELEASES }})
        shell: bash
        run: |
          set -euo pipefail
          cd "${APP_DIR}/releases" || exit 0
          # gi·ªØ N release m·ªõi nh·∫•t, x√≥a ph·∫ßn c√≤n l·∫°i
          sudo -n ls -1dt */ 2>/dev/null | tail -n +$((KEEP_RELEASES+1)) | xargs -r sudo -n rm -rf || true

      - name: Restart service & health check
        shell: bash
        run: |
          set -euo pipefail
          sudo -n systemctl daemon-reload || true
          sudo -n systemctl enable "${SERVICE_NAME}" || true
          sudo -n systemctl restart "${SERVICE_NAME}"

          echo "‚è≥ Waiting for HTTP readiness on :${PORT} ..."
          # ch·ªù socket l·∫Øng nghe tr∆∞·ªõc (t·ªëi ƒëa ~30s)
          for i in {1..30}; do
            if ss -lnt 2>/dev/null | grep -q ":${PORT}"; then
              break
            fi
            sleep 1
          done

          # th·ª≠ nhi·ªÅu ƒë∆∞·ªùng d·∫´n (t√πy app c√≥ /healthz hay kh√¥ng)
          for i in {1..30}; do
            for path in ${HEALTH_PATHS}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:${PORT}${path}" || true)
              if [ "$code" != "000" ]; then
                echo "‚úÖ App ready via ${path} (HTTP ${code})"
                echo "Deployed commit: ${GITHUB_SHA}" >> "$GITHUB_STEP_SUMMARY"
                exit 0
              fi
            done
            sleep 1
          done

          echo "‚ùå Service not reachable. Recent logs:"
          sudo -n journalctl -u "${SERVICE_NAME}" -n 200 --no-pager
          exit 1

      - name: Show last logs (on failure)
        if: failure()
        shell: bash
        run: |
          sudo -n systemctl status "${SERVICE_NAME}" --no-pager || true
          sudo -n journalctl -u "${SERVICE_NAME}" -n 400 --no-pager || true
