name: CD - Deploy to VM (self-hosted runner)

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, vm-dotnet-api]   # ép chạy đúng runner VM
    permissions:
      contents: read
    env:
      PROJECT: "src/AuthService.Api/AuthService.Api.csproj"   # ⇦ sửa nếu .csproj khác
      APP_DIR: "/opt/xanhnow-auth"
      PORT: "5000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify dotnet on VM
        run: dotnet --info

      - name: Verify project file exists
        shell: bash
        run: |
          set -euo pipefail
          test -f "$PROJECT" || { echo "❌ PROJECT not found: $PROJECT"; exit 1; }
          echo "Found PROJECT: $PROJECT"

      - name: Restore & Publish (self-contained linux-x64)
        shell: bash
        run: |
          set -euo pipefail
          dotnet restore "$PROJECT"
          dotnet publish "$PROJECT" -c Release -r linux-x64 --self-contained true \
            -p:PublishSingleFile=true -p:UseAppHost=true -o ./publish
          ls -la ./publish

      - name: Create run.sh (auto-detect exe/dll)
        shell: bash
        run: |
          set -euo pipefail
          cd ./publish
          cat > run.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          cd "$(dirname "$0")"
          export ASPNETCORE_URLS="${ASPNETCORE_URLS:-http://127.0.0.1:5000}"
          exe=$(find . -maxdepth 1 -type f -perm -111 ! -name "run.sh" ! -name "*.dll" | head -n1 || true)
          dll=$(find . -maxdepth 1 -type f -name "*.dll" | head -n1 || true)
          if [ -n "${exe:-}" ]; then
            exec "$exe"
          elif [ -n "${dll:-}" ]; then
            exec /usr/bin/env dotnet "$dll"
          else
            echo "No runnable app (exe/dll) found in $(pwd)" >&2
            ls -la
            exit 1
          fi
          SH
          chmod +x run.sh
          echo "run.sh ready"

      - name: Deploy to ${APP_DIR}
        shell: bash
        run: |
          set -euo pipefail
          RELEASE_DIR="${APP_DIR}/releases/${GITHUB_SHA}"
          sudo -n mkdir -p "$RELEASE_DIR"
          if command -v rsync >/dev/null 2>&1; then
            sudo -n rsync -a ./publish/ "$RELEASE_DIR"/
          else
            echo "rsync not found, fallback to cp -a"
            sudo -n cp -a ./publish/. "$RELEASE_DIR"/
          fi
          sudo -n chown -R deploy:deploy "$RELEASE_DIR"

          # BẢO ĐẢM 'current' LUÔN LÀ SYMLINK → TRỎ THẲNG VÀO RELEASE MỚI
          sudo -n rm -rf "${APP_DIR}/current"
          sudo -n ln -sfnT "$RELEASE_DIR" "${APP_DIR}/current"

          sudo -n chmod g+s ${APP_DIR} ${APP_DIR}/releases ${APP_DIR}/shared ${APP_DIR}/logs
          sudo -n chown -R deploy:deploy ${APP_DIR}

          # Debug ngắn
          echo "--- APP_DIR ---"
          sudo -n ls -la "${APP_DIR}" | sed -n '1,100p'
          echo "--- CURRENT ---"
          sudo -n ls -la "${APP_DIR}/current" | sed -n '1,80p'

      - name: Restart service & health check (robust)
        shell: bash
        run: |
          set -euo pipefail
          sudo -n systemctl restart xanhnow-auth

          echo "Waiting for service to accept HTTP..."
          for i in {1..30}; do
            for path in /healthz /health /swagger/index.html /; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:${PORT}${path}" || true)
              if [ "$code" != "000" ]; then
                echo "Ready via ${path} (HTTP $code)"
                exit 0
              fi
            done
            sleep 1
          done

          echo "❌ Service not reachable (HTTP 000). Recent logs:"
          sudo -n journalctl -u xanhnow-auth -n 200 --no-pager
          exit 1
