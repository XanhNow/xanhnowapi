name: CD - Deploy to VM (self-hosted runner)

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, vm-dotnet-api]   # ép chạy đúng runner của VM
    permissions:
      contents: read
    env:
      PROJECT: "src/AuthService.Api/AuthService.Api.csproj"  # ⇦ sửa nếu .csproj khác
      APP_DIR: "/opt/xanhnow-auth"
      PORT: "5000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Cài .NET SDK vào thư mục job (không cần sudo)
      - name: Setup .NET 8 SDK (user-local, no sudo)
        uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: ${{ github.workspace }}/.dotnet
        with:
          dotnet-version: '8.0.x'
          cache: false

      - name: Export dotnet to PATH
        shell: bash
        run: |
          set -euo pipefail
          echo "DOTNET_ROOT=${GITHUB_WORKSPACE}/.dotnet" >> $GITHUB_ENV
          echo "${GITHUB_WORKSPACE}/.dotnet" >> $GITHUB_PATH
          dotnet --info

      - name: Verify project file exists
        shell: bash
        run: |
          set -euo pipefail
          test -f "$PROJECT" || { echo "❌ PROJECT not found: $PROJECT"; exit 1; }
          echo "Found PROJECT: $PROJECT"

      - name: Restore & Publish (self-contained linux-x64)
        shell: bash
        run: |
          set -euo pipefail
          dotnet restore "$PROJECT"
          dotnet publish "$PROJECT" -c Release -r linux-x64 --self-contained true \
            -p:PublishSingleFile=true -p:UseAppHost=true -o ./publish
          ls -la ./publish

      - name: Create run.sh
        shell: bash
        run: |
          set -euo pipefail
          cd ./publish
          BIN=$(find . -maxdepth 1 -type f -perm -111 ! -name 'run.sh' ! -name '*.dll' | head -n1 || true)
          DLL=$(find . -maxdepth 1 -type f -name '*.dll' | head -n1 || true)
          cat > run.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          cd "$(dirname "$0")"
          if [ -x "./APP_BIN" ]; then
            exec ./APP_BIN
          elif [ -f "./APP_DLL" ]; then
            exec /usr/bin/env dotnet ./APP_DLL
          else
            echo "No runnable app found." >&2
            exit 1
          fi
          SH
          if [ -n "${BIN:-}" ]; then
            sed -i "s|APP_BIN|${BIN#./}|g" run.sh; sed -i "s|APP_DLL|missing.dll|g" run.sh
          else
            sed -i "s|APP_BIN|missing.bin|g" run.sh; sed -i "s|APP_DLL|${DLL#./}|g" run.sh
          fi
          chmod +x run.sh
          echo "run.sh ready"

      - name: Deploy to ${APP_DIR}
        shell: bash
        run: |
          set -euo pipefail
          RELEASE_DIR="${APP_DIR}/releases/${GITHUB_SHA}"
          sudo mkdir -p "$RELEASE_DIR"
          if command -v rsync >/dev/null 2>&1; then
            sudo rsync -a ./publish/ "$RELEASE_DIR"/
          else
            echo "rsync not found, fallback to cp -a"
            sudo cp -a ./publish/. "$RELEASE_DIR"/
          fi
          sudo chown -R deploy:deploy "$RELEASE_DIR"
          sudo ln -sfn "$RELEASE_DIR" "${APP_DIR}/current"
          sudo chmod g+s ${APP_DIR} ${APP_DIR}/releases ${APP_DIR}/shared ${APP_DIR}/logs
          sudo chown -R deploy:deploy ${APP_DIR}

      - name: Restart service & health check
        shell: bash
        run: |
          set -euo pipefail
          sudo systemctl restart xanhnow-auth
          for i in {1..20}; do
            for path in /health /swagger /; do
              if curl -fsS "http://127.0.0.1:${PORT}${path}" >/dev/null 2>&1; then
                echo "Health OK via ${path}"; exit 0
              fi
            done
            sleep 2
          done
          echo "❌ Health check failed — printing logs"
          sudo journalctl -u xanhnow-auth -n 200 --no-pager
          exit 1
